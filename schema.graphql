# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Setting {
  id: ID!
  key: String
  description: String
  value: JSON
}

input SettingWhereUniqueInput {
  id: ID
  key: String
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  id: IDFilter
  key: StringFilter
  description: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SettingOrderByInput {
  id: OrderDirection
  key: OrderDirection
  description: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SettingUpdateInput {
  key: String
  description: String
  value: JSON
}

input SettingUpdateArgs {
  where: SettingWhereUniqueInput!
  data: SettingUpdateInput!
}

input SettingCreateInput {
  key: String
  description: String
  value: JSON
}

type User {
  id: ID!
  name: String
  email: String
  role: UserRole
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: UserRoleWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  role: UserRoleRelateToOneForUpdateInput
  password: String
}

input UserRoleRelateToOneForUpdateInput {
  create: UserRoleCreateInput
  connect: UserRoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  role: UserRoleRelateToOneForCreateInput
  password: String
}

input UserRoleRelateToOneForCreateInput {
  create: UserRoleCreateInput
  connect: UserRoleWhereUniqueInput
}

type UserRole {
  id: ID!
  name: String
}

input UserRoleWhereUniqueInput {
  id: ID
  name: String
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  NOT: [UserRoleWhereInput!]
  id: IDFilter
  name: StringFilter
}

input UserRoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input UserRoleUpdateInput {
  name: String
}

input UserRoleUpdateArgs {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateInput!
}

input UserRoleCreateInput {
  name: String
}

type Route {
  id: ID!
  path: String
  type: String
}

input RouteWhereUniqueInput {
  id: ID
  path: String
}

input RouteWhereInput {
  AND: [RouteWhereInput!]
  OR: [RouteWhereInput!]
  NOT: [RouteWhereInput!]
  id: IDFilter
  path: StringFilter
  type: StringFilter
}

input RouteOrderByInput {
  id: OrderDirection
  path: OrderDirection
  type: OrderDirection
}

input RouteUpdateInput {
  path: String
  type: String
}

input RouteUpdateArgs {
  where: RouteWhereUniqueInput!
  data: RouteUpdateInput!
}

input RouteCreateInput {
  path: String
  type: String
}

type UserCart {
  id: ID!
  session: String
  lastActivity: DateTime
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  coupons(
    where: CouponWhereInput! = {}
    orderBy: [CouponOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserCartWhereUniqueInput {
  id: ID
  session: String
}

input UserCartWhereInput {
  AND: [UserCartWhereInput!]
  OR: [UserCartWhereInput!]
  NOT: [UserCartWhereInput!]
  id: IDFilter
  session: StringFilter
  lastActivity: DateTimeNullableFilter
  products: ProductManyRelationFilter
  coupons: CouponManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CouponManyRelationFilter {
  every: CouponWhereInput
  some: CouponWhereInput
  none: CouponWhereInput
}

input UserCartOrderByInput {
  id: OrderDirection
  session: OrderDirection
  lastActivity: OrderDirection
}

input UserCartUpdateInput {
  session: String
  lastActivity: DateTime
  products: ProductRelateToManyForUpdateInput
  coupons: CouponRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CouponRelateToManyForUpdateInput {
  disconnect: [CouponWhereUniqueInput!]
  set: [CouponWhereUniqueInput!]
  create: [CouponCreateInput!]
  connect: [CouponWhereUniqueInput!]
}

input UserCartUpdateArgs {
  where: UserCartWhereUniqueInput!
  data: UserCartUpdateInput!
}

input UserCartCreateInput {
  session: String
  lastActivity: DateTime
  products: ProductRelateToManyForCreateInput
  coupons: CouponRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CouponRelateToManyForCreateInput {
  create: [CouponCreateInput!]
  connect: [CouponWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
}

type Category {
  id: ID!
  name: String
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
}

type Page {
  id: ID!
  title: String
  content: Page_content_Document
  status: String
  publishDate: DateTime
  author: User
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  path(
    where: RouteWhereInput! = {}
    orderBy: [RouteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Route!]
  pathCount(where: RouteWhereInput! = {}): Int
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
  title: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  path: RouteManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input RouteManyRelationFilter {
  every: RouteWhereInput
  some: RouteWhereInput
  none: RouteWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PageUpdateInput {
  title: String
  content: JSON
  status: String
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  path: RouteRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input RouteRelateToManyForUpdateInput {
  disconnect: [RouteWhereUniqueInput!]
  set: [RouteWhereUniqueInput!]
  create: [RouteCreateInput!]
  connect: [RouteWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  content: JSON
  status: String
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  path: RouteRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input RouteRelateToManyForCreateInput {
  create: [RouteCreateInput!]
  connect: [RouteWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  featureImage: ImageFieldOutput
  price: Float
  stock: Int
  childOf: Product
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  path(
    where: RouteWhereInput! = {}
    orderBy: [RouteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Route!]
  pathCount(where: RouteWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProductWhereUniqueInput {
  id: ID
  name: String
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  price: FloatFilter
  stock: IntFilter
  childOf: ProductWhereInput
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  path: RouteManyRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
  stock: OrderDirection
}

input ProductUpdateInput {
  name: String
  featureImage: ImageFieldInput
  price: Float
  stock: Int
  childOf: ProductRelateToOneForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  path: RouteRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  featureImage: ImageFieldInput
  price: Float
  stock: Int
  childOf: ProductRelateToOneForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  path: RouteRelateToManyForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Order {
  id: ID!
  orderNo: String
  status: String
  user: User
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  coupons(
    where: CouponWhereInput! = {}
    orderBy: [CouponOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Coupon!]
  couponsCount(where: CouponWhereInput! = {}): Int
  total: Int
  orderMeta: JSON
}

input OrderWhereUniqueInput {
  id: ID
  orderNo: String
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  orderNo: StringFilter
  status: StringNullableFilter
  user: UserWhereInput
  products: ProductManyRelationFilter
  coupons: CouponManyRelationFilter
  total: IntFilter
}

input OrderOrderByInput {
  id: OrderDirection
  orderNo: OrderDirection
  status: OrderDirection
  total: OrderDirection
}

input OrderUpdateInput {
  orderNo: String
  status: String
  user: UserRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  coupons: CouponRelateToManyForUpdateInput
  total: Int
  orderMeta: JSON
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  orderNo: String
  status: String
  user: UserRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  coupons: CouponRelateToManyForCreateInput
  total: Int
  orderMeta: JSON
}

type Payment {
  id: ID!
  amount: Int
  user: User
  order: Order
  paymentMeta: JSON
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  amount: IntFilter
  user: UserWhereInput
  order: OrderWhereInput
}

input PaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
}

input PaymentUpdateInput {
  amount: Int
  user: UserRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  paymentMeta: JSON
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  amount: Int
  user: UserRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  paymentMeta: JSON
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Coupon {
  id: ID!
  code: String
  validFrom: DateTime
  validTo: DateTime
  rules: JSON
}

input CouponWhereUniqueInput {
  id: ID
  code: String
}

input CouponWhereInput {
  AND: [CouponWhereInput!]
  OR: [CouponWhereInput!]
  NOT: [CouponWhereInput!]
  id: IDFilter
  code: StringFilter
  validFrom: DateTimeNullableFilter
  validTo: DateTimeNullableFilter
}

input CouponOrderByInput {
  id: OrderDirection
  code: OrderDirection
  validFrom: OrderDirection
  validTo: OrderDirection
}

input CouponUpdateInput {
  code: String
  validFrom: DateTime
  validTo: DateTime
  rules: JSON
}

input CouponUpdateArgs {
  where: CouponWhereUniqueInput!
  data: CouponUpdateInput!
}

input CouponCreateInput {
  code: String
  validFrom: DateTime
  validTo: DateTime
  rules: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createSetting(data: SettingCreateInput!): Setting
  createSettings(data: [SettingCreateInput!]!): [Setting]
  updateSetting(
    where: SettingWhereUniqueInput!
    data: SettingUpdateInput!
  ): Setting
  updateSettings(data: [SettingUpdateArgs!]!): [Setting]
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteSettings(where: [SettingWhereUniqueInput!]!): [Setting]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserRole(data: UserRoleCreateInput!): UserRole
  createUserRoles(data: [UserRoleCreateInput!]!): [UserRole]
  updateUserRole(
    where: UserRoleWhereUniqueInput!
    data: UserRoleUpdateInput!
  ): UserRole
  updateUserRoles(data: [UserRoleUpdateArgs!]!): [UserRole]
  deleteUserRole(where: UserRoleWhereUniqueInput!): UserRole
  deleteUserRoles(where: [UserRoleWhereUniqueInput!]!): [UserRole]
  createRoute(data: RouteCreateInput!): Route
  createRoutes(data: [RouteCreateInput!]!): [Route]
  updateRoute(where: RouteWhereUniqueInput!, data: RouteUpdateInput!): Route
  updateRoutes(data: [RouteUpdateArgs!]!): [Route]
  deleteRoute(where: RouteWhereUniqueInput!): Route
  deleteRoutes(where: [RouteWhereUniqueInput!]!): [Route]
  createUserCart(data: UserCartCreateInput!): UserCart
  createUserCarts(data: [UserCartCreateInput!]!): [UserCart]
  updateUserCart(
    where: UserCartWhereUniqueInput!
    data: UserCartUpdateInput!
  ): UserCart
  updateUserCarts(data: [UserCartUpdateArgs!]!): [UserCart]
  deleteUserCart(where: UserCartWhereUniqueInput!): UserCart
  deleteUserCarts(where: [UserCartWhereUniqueInput!]!): [UserCart]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(
    where: PaymentWhereUniqueInput!
    data: PaymentUpdateInput!
  ): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createCoupon(data: CouponCreateInput!): Coupon
  createCoupons(data: [CouponCreateInput!]!): [Coupon]
  updateCoupon(where: CouponWhereUniqueInput!, data: CouponUpdateInput!): Coupon
  updateCoupons(data: [CouponUpdateArgs!]!): [Coupon]
  deleteCoupon(where: CouponWhereUniqueInput!): Coupon
  deleteCoupons(where: [CouponWhereUniqueInput!]!): [Coupon]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  settings(
    where: SettingWhereInput! = {}
    orderBy: [SettingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Setting!]
  setting(where: SettingWhereUniqueInput!): Setting
  settingsCount(where: SettingWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userRoles(
    where: UserRoleWhereInput! = {}
    orderBy: [UserRoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserRole!]
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  userRolesCount(where: UserRoleWhereInput! = {}): Int
  routes(
    where: RouteWhereInput! = {}
    orderBy: [RouteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Route!]
  route(where: RouteWhereUniqueInput!): Route
  routesCount(where: RouteWhereInput! = {}): Int
  userCarts(
    where: UserCartWhereInput! = {}
    orderBy: [UserCartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserCart!]
  userCart(where: UserCartWhereUniqueInput!): UserCart
  userCartsCount(where: UserCartWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  coupons(
    where: CouponWhereInput! = {}
    orderBy: [CouponOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Coupon!]
  coupon(where: CouponWhereUniqueInput!): Coupon
  couponsCount(where: CouponWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
