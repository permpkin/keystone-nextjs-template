# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Page {
  id: ID!
  title: String
  path: String
  slug: String
  description: String
  parent: Page
  blocks: JSON
  isHome: Boolean
}

input PageWhereUniqueInput {
  id: ID
  title: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  path: StringFilter
  slug: StringFilter
  description: StringFilter
  parent: PageWhereInput
  isHome: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  path: OrderDirection
  description: OrderDirection
}

input PageUpdateInput {
  title: String
  path: String
  slug: String
  description: String
  parent: PageRelateToOneForUpdateInput
  blocks: JSON
  isHome: Boolean
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  path: String
  slug: String
  description: String
  parent: PageRelateToOneForCreateInput
  blocks: JSON
  isHome: Boolean
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

type Meta {
  id: ID!
  key: String
  autoload: Boolean
  data: JSON
}

input MetaWhereUniqueInput {
  id: ID
  key: String
}

input MetaWhereInput {
  AND: [MetaWhereInput!]
  OR: [MetaWhereInput!]
  NOT: [MetaWhereInput!]
  id: IDFilter
  key: StringFilter
  autoload: BooleanFilter
}

input MetaOrderByInput {
  id: OrderDirection
  key: OrderDirection
  autoload: OrderDirection
}

input MetaUpdateInput {
  key: String
  autoload: Boolean
  data: JSON
}

input MetaUpdateArgs {
  where: MetaWhereUniqueInput!
  data: MetaUpdateInput!
}

input MetaCreateInput {
  key: String
  autoload: Boolean
  data: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createMeta(data: MetaCreateInput!): Meta
  createMetas(data: [MetaCreateInput!]!): [Meta]
  updateMeta(where: MetaWhereUniqueInput!, data: MetaUpdateInput!): Meta
  updateMetas(data: [MetaUpdateArgs!]!): [Meta]
  deleteMeta(where: MetaWhereUniqueInput!): Meta
  deleteMetas(where: [MetaWhereUniqueInput!]!): [Meta]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  metas(
    where: MetaWhereInput! = {}
    orderBy: [MetaOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Meta!]
  meta(where: MetaWhereUniqueInput!): Meta
  metasCount(where: MetaWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
